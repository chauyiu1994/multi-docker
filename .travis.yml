# use traivis to build the docker image
sudo: required
services:
  - docker

# run test before build actual production image
before_install:
  - docker build -t chauyiu1994/react-test -f ./client/Dockerfile.dev ./client

script:
  - docker run -e CI=true chauyiu1994/react-test npm test

after_success:
  - docker build -t chauyiu1994/multi-client ./client
  - docker build -t chauyiu1994/multi-nginx ./nginx
  - docker build -t chauyiu1994/multi-server ./server
  - docker build -t chauyiu1994/multi-worker ./worker

  # Login in to the docker CLI (single line)
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_ID" --password-stdin
  # Take those images and push them to docker hub
  - docker push chauyiu1994/multi-client
  - docker push chauyiu1994/multi-nginx
  - docker push chauyiu1994/multi-server
  - docker push chauyiu1994/multi-worker

  # the Dockerrun.aws.json file is for instructing AWS ECS TO RUN DOCKER IMAGE

deploy:
  # edge: true
  provider: elasticbeanstalk
  # regions of aws registered
  region: "us-east-2"
  # name of elasticbeanstalk instance
  app: "multi-docker"
  # env of elasticbeanstalk instance
  env: "MultiDocker-env"
  # travis zip the contents can deploy to a S3 bucket (check at s3 service dashbash)
  bucket_name: "elasticbeanstalk-us-east-2-873739410082"
  bucket_path: "multi-docker"
  # deploy only when master branch got modified
  on:
    branch: master

  # iam dashboard -> users -> add users -> Attach existing policies directly -> use AWSElasticBeanstalkFullAccess policy
  # adding the access key in the travis ci env variable dashboard
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key: $AWS_SECRET_KEY

